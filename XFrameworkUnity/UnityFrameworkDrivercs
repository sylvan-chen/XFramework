using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace XFramework.Unity
{
    public class UnityFrameworkDriver : MonoBehaviour, IFrameworkSupport
    {
        private readonly Dictionary<Type, IModule> _moduleDict = new();
        private readonly XLinkedList<IModule> _moduleList = new();

        private void Awake()
        {
            Global.RegisterSupport(this);
        }

        public void Update()
        {
            foreach (IModule module in _moduleList)
            {
                module.Update(Time.deltaTime, Time.unscaledDeltaTime);
            }
        }

        private void OnApplicationQuit()
        {
            ShutdownFramework();
        }

        public T GetModule<T>() where T : class, IModule
        {
            if (_moduleDict.TryGetValue(typeof(T), out IModule module))
            {
                return module as T;
            }
            return CreateManager<T>();
        }

        public void QuitGame()
        {
            XLog.Info("[XFramework.Unity] [FrameworkCoreAdapterUnity] Quit game...");
            ShutdownFramework();
            Application.Quit();
#if UNITY_EDITOR
            UnityEditor.EditorApplication.isPlaying = false;
#endif
        }

        public void RestartGame()
        {
            ShutdownFramework();
            XLog.Info("[XFramework.Unity] [FrameworkCoreAdapterUnity] Restarting game...");
            SceneManager.LoadScene(0);
        }

        public void ShutdownFramework()
        {
            XLog.Info("[XFramework.Unity] [FrameworkCoreAdapterUnity] Shutdown XFramework...");
            foreach (IModule module in _moduleDict.Values)
            {
                XLog.Debug($"Shutdown manager {module.GetType().Name}");
                module.Shutdown();
            }
            _moduleDict.Clear();
        }

        private T CreateManager<T>() where T : class, IModule
        {
            // 如果管理器没创建，就创建一个新的
            T newModule = Activator.CreateInstance<T>();
            XLog.Debug($"Create manager {newModule.GetType().Name}");
            newModule.Init();
            _moduleDict.Add(typeof(T), newModule);
            LinkedListNode<IModule> node = _moduleList.First;
            while (node != null && newModule.Priority > node.Value.Priority)
            {
                node = node.Next;
            }
            if (node == null)
            {
                _moduleList.AddLast(newModule);
            }
            else
            {
                _moduleList.AddBefore(node, newModule);
            }
            return newModule;
        }
    }
}